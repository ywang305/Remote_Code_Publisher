<!-------------------------------------------------------------------------
ConfigureParser.cpp
Published:  Tue Nov 28 23:09:33 2017
  Yaodong Wang, CSE687 - Object Oriented Design, Spring 2017

	Note:
		-Markup characters in the text part, enclosed in <pre>...< / pre> have to be
			replaced with escape sequences, e.g., < becomes &lt; and > becomes &gt;
		-Be careful that you don't replace genuine markup characters with escape 
			sequences, e.g., everything outside of the <pre>...< / pre> section.
  ----------------------------------------------------------------------------->
<!DOCTYPE html>
<html>

<head>
  <title>Code Publisher</title>
  <link rel="stylesheet" type="text/css" href="style/site.css">
  <script src="js/myScript.js"></script>
</head>

<body>

<header>ConfigureParser.cpp</header>

<nav>
  Dependencies:
  <a href="Parser.h.htm">Parser.h</a>
  <a href="ConfigureParser.h.htm">ConfigureParser.h</a>
  <a href="ActionsAndRules.h.htm">ActionsAndRules.h</a>
</nav>

<aside>

	<ul>
		<li><a href="#" onclick="Toggle('Parser.cpp')">Parser.cpp</a>
			<ul id="Parser.cpp" class="c0">
				<li><a href="#" onclick="Toggle('Demo')">Demo</a>
					<ul id="Demo" class="c1">
					</ul>
				</li>
				<li><a href="#" onclick="Toggle('[])')">[])</a>
					<ul id="[])" class="c1">
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('ActionsAndRules.h')">ActionsAndRules.h</a>
			<ul id="ActionsAndRules.h" class="c0">
				<li><a href="#" onclick="Toggle('CodeAnalysis')">CodeAnalysis</a>
					<ul id="CodeAnalysis" class="c1">
						<li><a href="#" onclick="Toggle('Language')">Language</a>
						<ul id="Language" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Path')">Path</a>
						<ul id="Path" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Repository')">Repository</a>
						<ul id="Repository" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('~Repository')">~Repository</a>
						<ul id="~Repository" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('language')">language</a>
						<ul id="language" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('package')">package</a>
						<ul id="package" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('currentPath')">currentPath</a>
						<ul id="currentPath" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('currentAccess')">currentAccess</a>
						<ul id="currentAccess" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('getInstance')">getInstance</a>
						<ul id="getInstance" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('scopeStack')">scopeStack</a>
						<ul id="scopeStack" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('AST')">AST</a>
						<ul id="AST" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('getGlobalScope')">getGlobalScope</a>
						<ul id="getGlobalScope" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Toker')">Toker</a>
						<ul id="Toker" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('lineCount')">lineCount</a>
						<ul id="lineCount" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('BeginScope')">BeginScope</a>
						<ul id="BeginScope" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleBeginScope')">HandleBeginScope</a>
						<ul id="HandleBeginScope" class="c2">
							<li><a href="#">HandleBeginScope</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('EndScope')">EndScope</a>
						<ul id="EndScope" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Dbug')">Dbug</a>
						<ul id="Dbug" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleEndScope')">HandleEndScope</a>
						<ul id="HandleEndScope" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('doAction')">doAction</a>
						<ul id="doAction" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('DetectAccessSpecifier')">DetectAccessSpecifier</a>
						<ul id="DetectAccessSpecifier" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleAccessSpecifier')">HandleAccessSpecifier</a>
						<ul id="HandleAccessSpecifier" class="c2">
							<li><a href="#">HandleAccessSpecifier</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('PreprocStatement')">PreprocStatement</a>
						<ul id="PreprocStatement" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandlePreprocStatement')">HandlePreprocStatement</a>
						<ul id="HandlePreprocStatement" class="c2">
							<li><a href="#">HandlePreprocStatement</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('NamespaceDefinition')">NamespaceDefinition</a>
						<ul id="NamespaceDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleNamespaceDefinition')">HandleNamespaceDefinition</a>
						<ul id="HandleNamespaceDefinition" class="c2">
							<li><a href="#">HandleNamespaceDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('ClassDefinition')">ClassDefinition</a>
						<ul id="ClassDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleClassDefinition')">HandleClassDefinition</a>
						<ul id="HandleClassDefinition" class="c2">
							<li><a href="#">HandleClassDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('StructDefinition')">StructDefinition</a>
						<ul id="StructDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleStructDefinition')">HandleStructDefinition</a>
						<ul id="HandleStructDefinition" class="c2">
							<li><a href="#">HandleStructDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('EnumDefinition')">EnumDefinition</a>
						<ul id="EnumDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleEnumDefinition')">HandleEnumDefinition</a>
						<ul id="HandleEnumDefinition" class="c2">
							<li><a href="#">HandleEnumDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('CppFunctionDefinition')">CppFunctionDefinition</a>
						<ul id="CppFunctionDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleCppFunctionDefinition')">HandleCppFunctionDefinition</a>
						<ul id="HandleCppFunctionDefinition" class="c2">
							<li><a href="#">HandleCppFunctionDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('CSharpFunctionDefinition')">CSharpFunctionDefinition</a>
						<ul id="CSharpFunctionDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleCSharpFunctionDefinition')">HandleCSharpFunctionDefinition</a>
						<ul id="HandleCSharpFunctionDefinition" class="c2">
							<li><a href="#">HandleCSharpFunctionDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('ControlDefinition')">ControlDefinition</a>
						<ul id="ControlDefinition" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleControlDefinition')">HandleControlDefinition</a>
						<ul id="HandleControlDefinition" class="c2">
							<li><a href="#">HandleControlDefinition</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Rslt')">Rslt</a>
						<ul id="Rslt" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('PrintFunction')">PrintFunction</a>
						<ul id="PrintFunction" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('PrettyPrintFunction')">PrettyPrintFunction</a>
						<ul id="PrettyPrintFunction" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('CppDeclaration')">CppDeclaration</a>
						<ul id="CppDeclaration" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleCppDeclaration')">HandleCppDeclaration</a>
						<ul id="HandleCppDeclaration" class="c2">
							<li><a href="#">HandleCppDeclaration</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('CSharpDeclaration')">CSharpDeclaration</a>
						<ul id="CSharpDeclaration" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleCSharpDeclaration')">HandleCSharpDeclaration</a>
						<ul id="HandleCSharpDeclaration" class="c2">
							<li><a href="#">HandleCSharpDeclaration</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('CppExecutable')">CppExecutable</a>
						<ul id="CppExecutable" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleCppExecutable')">HandleCppExecutable</a>
						<ul id="HandleCppExecutable" class="c2">
							<li><a href="#">HandleCppExecutable</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('CSharpExecutable')">CSharpExecutable</a>
						<ul id="CSharpExecutable" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleCSharpExecutable')">HandleCSharpExecutable</a>
						<ul id="HandleCSharpExecutable" class="c2">
							<li><a href="#">HandleCSharpExecutable</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Default')">Default</a>
						<ul id="Default" class="c2">
							<li><a href="#">doTest</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('HandleDefault')">HandleDefault</a>
						<ul id="HandleDefault" class="c2">
							<li><a href="#">HandleDefault</a></li>
							<li><a href="#">doAction</a></li>
						</ul>
					</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Child.h')">Child.h</a>
			<ul id="Child.h" class="c0">
				<li><a href="#" onclick="Toggle('ChildTest')">ChildTest</a>
					<ul id="ChildTest" class="c1">
						<li><a href="#" onclick="Toggle('element')">element</a>
						<ul id="element" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Numbers')">Numbers</a>
						<ul id="Numbers" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Child')">Child</a>
						<ul id="Child" class="c2">
							<li><a href="#">Child</a></li>
							<li><a href="#">~Child</a></li>
							<li><a href="#">inlineMethod</a></li>
							<li><a href="#">method2</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('globalFunction')">globalFunction</a>
						<ul id="globalFunction" class="c2">
						</ul>
					</li>
					</ul>
				</li>
				<li><a href="#" onclick="Toggle('globalFunction1')">globalFunction1</a>
					<ul id="globalFunction1" class="c1">
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Child2.h')">Child2.h</a>
			<ul id="Child2.h" class="c0">
				<li><a href="#" onclick="Toggle('ChildTest2')">ChildTest2</a>
					<ul id="ChildTest2" class="c1">
						<li><a href="#" onclick="Toggle('Child')">Child</a>
						<ul id="Child" class="c2">
						</ul>
					</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Child.cpp')">Child.cpp</a>
			<ul id="Child.cpp" class="c0">
				<li><a href="#" onclick="Toggle('method1')">method1</a>
					<ul id="method1" class="c1">
					</ul>
				</li>
				<li><a href="#" onclick="Toggle('method3')">method3</a>
					<ul id="method3" class="c1">
					</ul>
				</li>
				<li><a href="#" onclick="Toggle('method4')">method4</a>
					<ul id="method4" class="c1">
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('ConfigureParser.h')">ConfigureParser.h</a>
			<ul id="ConfigureParser.h" class="c0">
				<li><a href="#" onclick="Toggle('CodeAnalysis')">CodeAnalysis</a>
					<ul id="CodeAnalysis" class="c1">
						<li><a href="#" onclick="Toggle('ConfigParseForCodeAnal')">ConfigParseForCodeAnal</a>
						<ul id="ConfigParseForCodeAnal" class="c2">
							<li><a href="#">ConfigParseForCodeAnal</a></li>
						</ul>
					</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('ConfigureParser.cpp')">ConfigureParser.cpp</a>
			<ul id="ConfigureParser.cpp" class="c0">
				<li><a href="#" onclick="Toggle('[])')">[])</a>
					<ul id="[])" class="c1">
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Grandparent.h')">Grandparent.h</a>
			<ul id="Grandparent.h" class="c0">
				<li><a href="#" onclick="Toggle('GrandParent')">GrandParent</a>
					<ul id="GrandParent" class="c1">
						<li><a href="#" onclick="Toggle('GrandParent')">GrandParent</a>
						<ul id="GrandParent" class="c2">
							<li><a href="#">GrandParent</a></li>
							<li><a href="#">~GrandParent</a></li>
							<li><a href="#">GPmethod2</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('~GrandParent')">~GrandParent</a>
						<ul id="~GrandParent" class="c2">
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('GPmethod2')">GPmethod2</a>
						<ul id="GPmethod2" class="c2">
						</ul>
					</li>
					</ul>
				</li>
				<li><a href="#" onclick="Toggle('globalFunction2')">globalFunction2</a>
					<ul id="globalFunction2" class="c1">
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Test.cpp')">Test.cpp</a>
			<ul id="Test.cpp" class="c0">
				<li><a href="#" onclick="Toggle('GPmethod3')">GPmethod3</a>
					<ul id="GPmethod3" class="c1">
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Parent.h')">Parent.h</a>
			<ul id="Parent.h" class="c0">
				<li><a href="#" onclick="Toggle('parent1')">parent1</a>
					<ul id="parent1" class="c1">
						<li><a href="#" onclick="Toggle('parent2')">parent2</a>
						<ul id="parent2" class="c2">
							<li><a href="#">Parent</a></li>
						</ul>
					</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('Parser.h')">Parser.h</a>
			<ul id="Parser.h" class="c0">
				<li><a href="#" onclick="Toggle('CodeAnalysis')">CodeAnalysis</a>
					<ul id="CodeAnalysis" class="c1">
						<li><a href="#" onclick="Toggle('IBuilder')">IBuilder</a>
						<ul id="IBuilder" class="c2">
							<li><a href="#">~IBuilder</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('IAction')">IAction</a>
						<ul id="IAction" class="c2">
							<li><a href="#">~IAction</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('IRule')">IRule</a>
						<ul id="IRule" class="c2">
							<li><a href="#">~IRule</a></li>
						</ul>
					</li>
						<li><a href="#" onclick="Toggle('Parser')">Parser</a>
						<ul id="Parser" class="c2">
							<li><a href="#">Parser</a></li>
							<li><a href="#">~Parser</a></li>
						</ul>
					</li>
					</ul>
				</li>
			</ul>
		</li>
		<li><a href="#" onclick="Toggle('ActionsAndRules.cpp')">ActionsAndRules.cpp</a>
			<ul id="ActionsAndRules.cpp" class="c0">
				<li><a href="#" onclick="Toggle('[])')">[])</a>
					<ul id="[])" class="c1">
					</ul>
				</li>
			</ul>
		</li>
	</ul>

</aside>

<pre>
/////////////////////////////////////////////////////////////////////
//  ConfigureParser.cpp - builds and configures parsers            //
//  ver 3.2                                                        //
//                                                                 //
//  Lanaguage:     Visual C++ 2005                                 //
//  Platform:      Dell Dimension 9150, Windows XP SP2             //
//  Application:   Prototype for CSE687 Pr1, Sp06                  //
//  Author:        Jim Fawcett, CST 2-187, Syracuse University     //
//                 (315) 443-3948, jfawcett@twcny.rr.com           //
/////////////////////////////////////////////////////////////////////

#include &lt;fstream&gt;
#include "Parser.h"
#include "../SemiExp/SemiExp.h"
#include "../Tokenizer/Tokenizer.h"
#include "ActionsAndRules.h"
#include "ConfigureParser.h"

using namespace CodeAnalysis;
using namespace Scanner;

//----&lt; destructor releases all parts &gt;------------------------------

ConfigParseForCodeAnal::~ConfigParseForCodeAnal()
{
  // when Builder goes out of scope, everything must be deallocated

  delete pHandleBeginScope;
  delete pBeginScope;
  delete pHandleEndScope;
  delete pEndScope;
  delete pHandlePreprocStatement;
  delete pPreprocStatement;
  delete pHandleClassDefinition;
  delete pClassDefinition;
  delete pHandleStructDefinition;
  delete pStructDefinition;
  //delete pPrintFunction;
  delete pHandleCppFunctionDefinition;
  delete pCppFunctionDefinition;
  delete pHandleCSharpFunctionDefinition;
  delete pCSharpFunctionDefinition;
  delete pCppDeclaration;
  delete pHandleCppDeclaration;
  delete pCSharpDeclaration;
  delete pHandleCSharpDeclaration;
  delete pCppExecutable;
  delete pHandleCppExecutable;
  delete pCSharpExecutable;
  delete pHandleCSharpExecutable;
  delete pDefault;
  delete pHandleDefault;
  delete pRepo;
  delete pParser;
  delete pSemi;
  delete pToker;
  if(pIn != nullptr)
    pIn-&gt;close();
  delete pIn;
}
//----&lt; attach toker to a file stream or stringstream &gt;------------

bool ConfigParseForCodeAnal::Attach(const std::string& name, bool isFile)
{
  if(pToker == 0)
    return false;
  pIn = new std::ifstream(name);
  if (!pIn-&gt;good())
    return false;
  
  // check for Byte Order Mark (BOM)
  char a, b, c;
  a = pIn-&gt;get();
  b = pIn-&gt;get();
  c = pIn-&gt;get();
  if (a != (char)0xEF || b != (char)0xBB || c != (char)0xBF)
    pIn-&gt;seekg(0);

  if (!pIn-&gt;good())
  {
    // empty file, but openable, so return true, avoids error message
    return true;
  }
  return pToker-&gt;attach(pIn);
}
//----&lt; Here's where all the parts get assembled &gt;-----------------

Parser* ConfigParseForCodeAnal::Build()
{
  try
  {
    pToker = new Toker;
    pToker-&gt;returnComments(false);
    pSemi = new SemiExp(pToker);
    pParser = new Parser(pSemi);
    pRepo = new Repository(pToker);
    pBeginScope = new BeginScope();
    pHandleBeginScope = new HandleBeginScope(pRepo);
    pBeginScope-&gt;addAction(pHandleBeginScope);
    pParser-&gt;addRule(pBeginScope);
    pEndScope = new EndScope();
    pHandleEndScope = new HandleEndScope(pRepo);
    pEndScope-&gt;addAction(pHandleEndScope);
    pParser-&gt;addRule(pEndScope);
    pPreprocStatement = new PreprocStatement;
    pHandlePreprocStatement = new HandlePreprocStatement(pRepo);
    pPreprocStatement-&gt;addAction(pHandlePreprocStatement);
    pParser-&gt;addRule(pPreprocStatement);

    pNamespaceDefinition = new NamespaceDefinition;
    pHandleNamespaceDefinition = new HandleNamespaceDefinition(pRepo);
    pNamespaceDefinition-&gt;addAction(pHandleNamespaceDefinition);
    pParser-&gt;addRule(pNamespaceDefinition);

    pClassDefinition = new ClassDefinition;
    pHandleClassDefinition = new HandleClassDefinition(pRepo);
    pClassDefinition-&gt;addAction(pHandleClassDefinition);
    pParser-&gt;addRule(pClassDefinition);

    pStructDefinition = new StructDefinition;
    pHandleStructDefinition = new HandleStructDefinition(pRepo);
    pStructDefinition-&gt;addAction(pHandleStructDefinition);
    pParser-&gt;addRule(pStructDefinition);

	pEnumDefinition = new EnumDefinition;
	pHandleEnumDefinition = new HandleEnumDefinition(pRepo);
	pEnumDefinition-&gt;addAction(pHandleEnumDefinition);
	pParser-&gt;addRule(pEnumDefinition);

    pCppFunctionDefinition = new CppFunctionDefinition;
    pHandleCppFunctionDefinition = new HandleCppFunctionDefinition(pRepo);  // no action
    pCppFunctionDefinition-&gt;addAction(pHandleCppFunctionDefinition);
    pParser-&gt;addRule(pCppFunctionDefinition);

    pCSharpFunctionDefinition = new CSharpFunctionDefinition;
    pHandleCSharpFunctionDefinition = new HandleCSharpFunctionDefinition(pRepo);  // no action
    pCSharpFunctionDefinition-&gt;addAction(pHandleCSharpFunctionDefinition);
    pParser-&gt;addRule(pCSharpFunctionDefinition);
    pControlDefinition = new ControlDefinition;
    pHandleControlDefinition = new HandleControlDefinition(pRepo);
    pControlDefinition-&gt;addAction(pHandleControlDefinition);
    pParser-&gt;addRule(pControlDefinition);

    pCppDeclaration = new CppDeclaration;
    pHandleCppDeclaration = new HandleCppDeclaration(pRepo);
    pCppDeclaration-&gt;addAction(pHandleCppDeclaration);
    pParser-&gt;addRule(pCppDeclaration);

    pCSharpDeclaration = new CSharpDeclaration;
    pHandleCSharpDeclaration = new HandleCSharpDeclaration(pRepo);
    pCSharpDeclaration-&gt;addAction(pHandleCSharpDeclaration);
    pParser-&gt;addRule(pCSharpDeclaration);
    pCppExecutable = new CppExecutable;
    pHandleCppExecutable = new HandleCppExecutable(pRepo);
    pCppExecutable-&gt;addAction(pHandleCppExecutable);
    pParser-&gt;addRule(pCppExecutable);
    pCSharpExecutable = new CSharpExecutable;
    pHandleCSharpExecutable = new HandleCSharpExecutable(pRepo);
    pCSharpExecutable-&gt;addAction(pHandleCSharpExecutable);
    pParser-&gt;addRule(pCSharpExecutable);
    pDefault = new Default;
    pHandleDefault = new HandleDefault(pRepo);
    pDefault-&gt;addAction(pHandleDefault);
    pParser-&gt;addRule(pDefault);
    return pParser;
  }
  catch(std::exception& ex)
  {
    std::cout &lt;&lt; "\n\n  " &lt;&lt; ex.what() &lt;&lt; "\n\n";
    return 0;
  }
}

#ifdef TEST_CONFIGUREPARSER

#include &lt;queue&gt;
#include &lt;string&gt;

int main(int argc, char* argv[])
{
  std::cout &lt;&lt; "\n  Testing ConfigureParser module\n "
            &lt;&lt; std::string(32,'=') &lt;&lt; std::endl;

  // collecting tokens from files, named on the command line

  if(argc &lt; 2)
  {
    std::cout 
      &lt;&lt; "\n  please enter name of file to process on command line\n\n";
    return 1;
  }

  for(int i=1; i&lt;argc; ++i)
  {
    std::cout &lt;&lt; "\n  Processing file " &lt;&lt; argv[i];
    std::cout &lt;&lt; "\n  " &lt;&lt; std::string(16 + strlen(argv[i]),'-');

    ConfigParseForCodeAnal configure;
    Parser* pParser = configure.Build();
    try
    {
      if(pParser)
      {
        if(!configure.Attach(argv[i]))
        {
          std::cout &lt;&lt; "\n  could not open file " &lt;&lt; argv[i] &lt;&lt; std::endl;
          continue;
        }
      }
      else
      {
        std::cout &lt;&lt; "\n\n  Parser not built\n\n";
        return 1;
      }
      // now that parser is built, use it

      while(pParser-&gt;next())
        pParser-&gt;parse();
      std::cout &lt;&lt; "\n\n";
    }
    catch(std::exception& ex)
    {
      std::cout &lt;&lt; "\n\n    " &lt;&lt; ex.what() &lt;&lt; "\n\n";
    }
    std::cout &lt;&lt; "\n\n";
  }
}

#endif

</pre>

</body>

</html>
